AWSTemplateFormatVersion: '2010-09-09'
Description: Enable AWS CloudTrail with alerting, queue, and Lambda processing
  for specific events, storing data in DynamoDB.

Parameters:

  TrailBucketName:
    Description: Name of the S3 bucket to store CloudTrail logs.
    Type: String
    Default: cloudtrail-logs-bucket
    ConstraintDescription: Must be a valid S3 bucket name (3-63 characters).
  
  AlertEmail:
    Description: Email address to receive notifications when specific events are detected.
    Type: String
    ConstraintDescription: Must be a valid email address.

Resources:
    # Create KMS CloudTrail encryption key
    cloudtrailKey:
      Type: AWS::KMS::Key
      Properties:
        KeyPolicy:
          Version: 2012-10-17
          Id: key-cloudtrail
          Statement:
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS: !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
              Action: 'kms:*'
              Resource: '*'
            - Sid: Allow CloudTrail to encrypt logs
              Effect: Allow
              Principal:
                Service:
                  - cloudtrail.amazonaws.com
              Action: 'kms:GenerateDataKey*'
              Resource: '*'
              Condition:
                StringLike:
                  'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'
            - Sid: Allow CloudTrail to describe key
              Effect: Allow
              Principal:
                Service:
                  - cloudtrail.amazonaws.com
              Action: 'kms:DescribeKey'
              Resource: '*'
            - Sid: Allow principals in the account to decrypt log files
              Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - 'kms:Decrypt'
                - 'kms:ReEncryptFrom'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:CallerAccount': !Sub '${AWS::AccountId}'
                StringLike:
                  'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'
            - Sid: Allow alias creation during setup
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'kms:CreateAlias'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:ViaService': ec2.region.amazonaws.com
                  'kms:CallerAccount': !Sub '${AWS::AccountId}'
            - Sid: Enable cross account log decryption
              Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - 'kms:Decrypt'
                - 'kms:ReEncryptFrom'
              Resource: '*'
              Condition:
                StringEquals:
                  'kms:CallerAccount': !Sub '${AWS::AccountId}'
                StringLike:
                  'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'

    cloudtrailKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/cloudtrail
        TargetKeyId:
          Ref: cloudtrailKey

    # Create KMS CloudTrail S3 bucket encryption key
    s3cloudtrailKey:
      Type: AWS::KMS::Key
      Properties:
        KeyPolicy:
          Version: 2012-10-17
          Id: key-cloudtrails3
          Statement:
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS: !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
              Action: 'kms:*'
              Resource: '*'
            - Sid: Allow VPC Flow Logs to use the key
              Effect: Allow
              Principal:
                Service:
                  - delivery.logs.amazonaws.com
              Action: 'kms:GenerateDataKey*'
              Resource: '*'

    s3cloudtrailKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/cloudtrails3
        TargetKeyId:
          Ref: s3cloudtrailKey

    # Create CloudTrail encrypted S3 bucket for storage
    CloudTrailS3Bucket:
      DependsOn:
          - s3cloudtrailKey
          - s3cloudtrailKeyAlias
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        BucketName: !Ref TrailBucketName
        BucketEncryption:
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${s3cloudtrailKeyAlias}'
              SSEAlgorithm: 'aws:kms'
        # NotificationConfiguration:
        #   LambdaConfigurations:
        #   - Event: s3:ObjectCreated:*
        #     Function: !GetAtt LogProcessorLambda.Arn

    CloudTrailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: CloudTrailS3Bucket
      Properties:
        Bucket: !Ref CloudTrailS3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "AWSCloudTrailAclCheck"
              Effect: Allow
              Principal:
                Service: 'cloudtrail.amazonaws.com'
              Action: "s3:GetBucketAcl"
              Resource: !Sub arn:aws:s3:::${TrailBucketName}
            - Sid: "AWSCloudTrailWrite"
              Effect: Allow
              Principal:
                Service: 'cloudtrail.amazonaws.com'
              Action: "s3:PutObject"
              Resource: !Sub arn:aws:s3:::${TrailBucketName}/AWSLogs/${AWS::AccountId}/*
              Condition:
                StringEquals:
                  's3:x-amz-acl': 'bucket-owner-full-control'
            # - Sid: AllowLambdaInvoke
            #   Effect: Allow
            #   Principal:
            #     Service: lambda.amazonaws.com
            #   Action: s3:GetObject
            #   Resource: !Sub arn:aws:s3:::${TrailBucketName}

    # Enable CloudTrail
    MyCloudTrail:
      DependsOn: CloudTrailS3Bucket
      Type: AWS::CloudTrail::Trail
      Properties:
        S3BucketName: !Ref TrailBucketName
        IsLogging: true
        KMSKeyId: !GetAtt cloudtrailKey.Arn
        
    # CloudWatch Log Group
    CloudWatchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "/aws/lambda/log-processor"
        RetentionInDays: 7
    
    # SNS Topic
    LogAlertTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CloudTrailLogAlerts

    # lambda function
    LogProcessorLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: LogProcessor
        Runtime: python3.11
        Description: Processes S3 Log Files
        Handler: index.handler
        Environment:
          Variables:
            LOG_GROUP: "/aws/lambda/log-processor"
            BUCKET_NAME: 
              Ref: CloudTrailS3Bucket
            TABLE_NAME:
              Ref: SecurityEventsTable
            TOPIC_ARN:
              Ref: LogAlertTopic

        Code:
          ZipFile: |
            import boto3
            import json
            import uuid
            import os
            sns_client = boto3.client('sns')
            dynamodb = boto3.resource('dynamodb')
            s3 = boto3.client('s3')
            CONFIG_FILE_KEY = 'config/monitored_events.json'
            c_topic_arn = os.environ["TOPIC_ARN"]
            c_bucket_name = os.environ["BUCKET_NAME"]
            c_table_name = os.environ["TABLE_NAME"]
            def fetch_event_list(c_bucket_name, config_key):
                """Fetch the list of events to monitor from the S3 bucket."""
                try:
                    response = s3.get_object(Bucket=c_bucket_name, Key=config_key)
                    config_data = response['Body'].read().decode('utf-8')
                    return json.loads(config_data).get('events', [])
                except Exception as e:
                    print(f"Error fetching configuration file: {str(e)}")
                    return []
            def handler(event, context):
                table = dynamodb.Table(c_table_name)
                events_to_monitor = fetch_event_list(c_bucket_name, CONFIG_FILE_KEY)
                print(f"Monitoring Events: {events_to_monitor}")
                for record in event['Records']:
                    # Get S3 bucket and object details
                    s_bucket_name = record['s3']['bucket']['name']
                    object_key = record['s3']['object']['key']
                    # Read log file
                    log_file = s3.get_object(Bucket=s_bucket_name, Key=object_key)
                    log_data = json.loads(log_file['Body'].read().decode('utf-8'))
                    # Process log entries
                    for log_entry in log_data.get('Records', []):
                        if log_entry['eventName'] in events_to_monitor:
                            # Save to DynamoDB
                            table.put_item(
                                Item={
                                    'EventId': str(uuid.uuid4()),
                                    'EventName': log_entry['eventName'],
                                    'EventTime': log_entry['eventTime'],
                                    'Username': log_entry.get('userIdentity', {}).get('userName', 'Unknown'),
                                    'SourceIP': log_entry.get('sourceIPAddress', 'Unknown')
                                }
                            )
                            # Publish SNS Alert
                            sns_client.publish(
                                TopicArn=c_topic_arn,
                                Message=json.dumps(log_entry, indent=2),
                                Subject=f"Security Event Detected: {log_entry['eventName']}"
                            )
        Role: !GetAtt LambdaExecutionRole.Arn
        Timeout: 60    

  # DynamoDB Table
    SecurityEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SecurityEvents
        AttributeDefinitions:
          - AttributeName: EventId
            AttributeType: S
        KeySchema:
          - AttributeName: EventId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: LambdaAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListBucket
                    - dynamodb:PutItem
                    - dynamodb:DescribeTable
                  Resource:
                    - !Sub arn:aws:s3:::${TrailBucketName}
                    - !Sub arn:aws:s3:::${TrailBucketName}/*
                    - !GetAtt SecurityEventsTable.Arn
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: !Ref LogAlertTopic
          - PolicyName: "LambdaExecutionPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                  Resource: "*"

    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: 
          Ref: LogProcessorLambda
        Action: "lambda:InvokeFunction"
        Principal: "s3.amazonaws.com"
        SourceArn: 
          Fn::Sub: "arn:aws:s3:::${TrailBucketName}"
          # Resource: !Sub arn:aws:s3:::${TrailBucketName}
          
    LogAlertTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CloudTrailLogAlerts

    LogAlertSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn: !Ref LogAlertTopic
        Endpoint: !Ref AlertEmail

Outputs:
    CloudTrailKMSKeyAlias:
        Description: 'CloudTrail KMS Key Alias'
        Value:
            Ref: 'cloudtrailKeyAlias'
    S3KMSKeyAlias:
        Description: 'S3 KMS Key Alias'
        Value:
            Ref: 's3cloudtrailKeyAlias'
    CloudTrailS3Bucket:
        Description: 'Encrypted S3 Bucket for CloudTrail Logs'
        Value:
            Ref: 'CloudTrailS3Bucket'
    CloudTrailS3BucketPolicy:
        Description: 'S3 Bucket Policy for CloudTrail Logs'
        Value:
            Ref: 'CloudTrailBucketPolicy'
    CloudTrail:
        Description: 'CloudTrail'
        Value:
            Ref: 'MyCloudTrail'